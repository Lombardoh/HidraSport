
class Categorias(models.Model):
    nombre = models.CharField(max_length=20)
    destacada = models.BooleanField(default=False)
#    imagen = models.ImageField(upload_to='images/')
    
    def __str__(self):
        return self.nombre
    
class Product(models.Model):
    #codigo_de_barras= models.IntegerField()
    name = models.CharField(max_length=100)
#    descripcion = models.CharField(max_length=50, blank=True, null=True)
#    sexo = models.CharField(max_length=50, blank=True, null=True)
#    color = models.CharField(max_length=50, blank=True, null=True)
#    guard = models.CharField(max_length=50, blank=True, null=True)
#    telas = models.CharField(max_length=50, blank=True, null=True)
#    diseño = models.CharField(max_length=50, blank=True, null=True)
#    detalle_color = models.CharField(max_length=50, blank=True, null=True)
#    faltante = models.CharField(max_length=50, blank=True, null=True)
#    image = models.ImageField(upload_to='products/')
#    secundaria = models.ImageField(upload_to='products/')
#    categorias = models.ManyToManyField('Categorias', related_name='categorias', blank=True)
#    price = models.FloatField()
#    oferta = models.BooleanField(default=False)
#    lomejor = models.BooleanField(default=False)
    def __str__(self):
        return self.name
    
    
    
class Talles(models.Model):
    product = models.ForeignKey(Product, null = True, blank = True, on_delete=models.CASCADE)
    talle = models.CharField(max_length=20, blank=True, null=True)
#    largo = models.CharField(max_length=50, blank=True, null=True)
#    cadera = models.CharField(max_length=50, blank=True, null=True)
#    manga = models.CharField(max_length=50, blank=True, null=True)
#    siza = models.CharField(max_length=50, blank=True, null=True)
#    tiro = models.CharField(max_length=50, blank=True, null=True)
#    bajo_busto = models.CharField(max_length=50, blank=True, null=True)
#    cintura = models.CharField(max_length=50, blank=True, null=True)
#    ubicacion = models.CharField(max_length=50, blank=True, null=True)
#    tamaño_caja = models.CharField(max_length=50, blank=True, null=True)
    cantidad = models.IntegerField(default = 0, blank=True, null=True)
    
    
    def __str__(self):
        return self.talle

    
class Secciones(models.Model):
    nombre = models.CharField(max_length=100)
    imagen = models.ImageField(upload_to='images/', help_text="La imagen debe ser 1.5 mas ancha que alta. Minimo 1000x670px ")
    categorias = models.OneToOneField('Categorias', related_name='secciones', on_delete=models.CASCADE)
    
class Images(models.Model): #expense
    image = models.ImageField(upload_to='products/')
    product = models.ForeignKey(Product, default=None, on_delete=models.CASCADE)
    def __str__(self):
        return '{}'.format(self.product.name)
        
        
        ----------

admin.site.site_header = "HidraSport Admin"

#inlines

class ImagesAdmin(admin.TabularInline):
    model = Images

class TallesAdmin(admin.TabularInline):
    model = Talles
        
    
#admin registers

class SeccionesAdmin(admin.ModelAdmin):
    list_display = ("nombre", "categorias", "imagen")    
    pass

class CategoriastAdmin(admin.ModelAdmin):
    list_display = ("nombre", "destacada")
    pass

@admin.register(Product)
class ProductAdmin(ImportExportModelAdmin):
    #resource_class = ProductResource
    #list_display = ("name", "descripcion", "sexo", "color", "guard", "telas", "diseño", 'detalle_color', "image")
    inlines = [ImagesAdmin, TallesAdmin]
    
    def lista_categorias(self, obj):
        return ", ".join([str(p) for p in obj.categorias.all()])
#    pass

@admin.register(Talles)
class TallesAdmin(ImportExportModelAdmin):
    resource_class = TallesResource
    list_display = ('id', 'product', 'talle', 'cantidad')
    pass

@admin.register(Images)
class ImagesAdmin(ImportExportModelAdmin):
    resource_class = ImagesResource
    pass


admin.site.register(Categorias, CategoriastAdmin)
admin.site.register(Secciones, SeccionesAdmin)
